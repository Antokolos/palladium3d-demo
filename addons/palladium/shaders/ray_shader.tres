[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform float ray_opacity = 0.5;
uniform float brightness = 100.0;

void vertex() {
	// Particle billboard mode
	mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
	mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
}

void fragment() {
	vec3 c = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
	float r2 = (UV.x - 0.5) * (UV.x - 0.5) + (UV.y - 0.5) * (UV.y - 0.5);
	float circ = 1.0 - r2 / 0.25;
	if (circ < 0.0) {
		// If it is outside the circle, it is not visible
		ALPHA = 0.0;
	} else {
		// If it is inside the circle, the ALPHA is determined by how far from the center it is
		c.rgb = mix(vec3(0.0), c.rgb, circ * brightness);
		ALBEDO = c;
		ALPHA = circ * ray_opacity;
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/ray_opacity = 0.5
shader_param/brightness = 100.0
