[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://addons/palladium/shaders/water_3d/textures/water_normal.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,cull_disabled,diffuse_burley,specular_schlick_ggx;

// Proximity fade
uniform float proximity_fade_distance = 0.5;

// Normalmap params
uniform vec2 normalmap_scale = vec2(0.5, 0.5);
uniform sampler2D normalmap : hint_normal;

uniform bool is_billboard = true;
uniform vec4 base_color : hint_color = vec4(0.678, 1.0, 0.768, 1.0);

void vertex() {
	// Particle billboard mode
	if (is_billboard) {
		mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
		mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
	}
}

void fragment() {
	ALBEDO = COLOR.rgb * base_color.rgb;
	METALLIC = 0.0;
	ROUGHNESS = 0.9;
	SPECULAR = 0.5;
	NORMALMAP = texture(normalmap, UV * normalmap_scale).rgb;

	// Making it visible only in circular area, to be used together with simple quad mesh
	// Normalized circle, with the center in the center of the quad mesh (0.5, 0.5)
	float circ = 1.0 - ((UV.x - 0.5) * (UV.x - 0.5) + (UV.y - 0.5) * (UV.y - 0.5)) / 0.25;
	if (circ < 0.0) {
		// If it is outside the circle, it is not visible
		ALPHA = 0.0;
	} else {
		// If it is inside the circle, the ALPHA is determined by how far from the center it is
		ALPHA = circ * COLOR.a * base_color.a;
	}
	
	// Proximity fade
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
}"

[resource]
shader = SubResource( 1 )
shader_param/proximity_fade_distance = 0.5
shader_param/normalmap_scale = Vector2( 0.5, 0.5 )
shader_param/is_billboard = false
shader_param/base_color = Color( 0.678, 1, 0.768, 1 )
shader_param/normalmap = ExtResource( 1 )
