[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform vec3 color = vec3(4.75, 5.0, 20.0);

float hash(vec2 p, in float s)
{
	return fract(sin(dot(vec3(p.xy,10.0 * abs(sin(s))), vec3(27.1, 61.7, 12.4))) * 273758.5453123);
}

float noise(in vec2 p, in float s)
{
	vec2 i = floor(p);
	vec2 f = fract(p);
	f *= f * (3.0 - 2.0 * f);
	return mix(mix(hash(i + vec2(0.0, 0.0), s), hash(i + vec2(1.0, 0.0), s),f.x),mix(hash(i + vec2(0.0, 1.0), s), hash(i + vec2(1.0, 1.0), s),f.x),f.y) * s;
}

float fbm(vec2 p)
{
	float v = 0.0;
	v += noise(p * 1.0, 0.35);
	v += noise(p * 2.0, 0.25);
	v += noise(p * 4.0, 0.125);
	v += noise(p * 8.0, 0.0625);
	return v;
}

void vertex() {
	// Particle billboard mode
	mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
	mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
}

void fragment()
{
	vec2 uv = UV * 1.3 - 1.0;
	float t = abs(4.0 / ((uv.x + fbm(uv + TIME)) * 50.0));
	vec3 finalColor = t * color;
	ALBEDO = finalColor;
	float r2 = (UV.x - 0.5) * (UV.x - 0.5) + (UV.y - 0.5) * (UV.y - 0.5);
	float circ = 1.0 - r2 / 0.25;
	if (t > 0.16 && circ > 0.0) {
		ALPHA = min(t / 14.0, 1.0) * circ * circ * circ * circ;
	} else {
		ALPHA = 0.0;
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/color = Vector3( 4.75, 5, 20 )
